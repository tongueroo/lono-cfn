{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "CreateEC2LCWithKeyPair": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "KeyName"
            },
            ""
          ]
        }
      ]
    },
    "CreateEC2LCWithoutKeyPair": {
      "Fn::Equals": [
        {
          "Ref": "KeyName"
        },
        ""
      ]
    },
    "CreateELB": {
      "Fn::Or": [
        {
          "Condition": "CreateELBForExistingVpc"
        },
        {
          "Condition": "CreateELBForNewVpc"
        }
      ]
    },
    "CreateELBForExistingVpc": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "CreateElasticLoadBalancer"
            },
            "true"
          ]
        },
        {
          "Condition": "ExistingVpcResources"
        }
      ]
    },
    "CreateELBForNewVpc": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "CreateElasticLoadBalancer"
            },
            "true"
          ]
        },
        {
          "Condition": "CreateVpcResources"
        }
      ]
    },
    "CreateVpcResources": {
      "Fn::Equals": [
        {
          "Ref": "VpcId"
        },
        ""
      ]
    },
    "ExistingVpcResources": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "VpcId"
            },
            ""
          ]
        }
      ]
    },
    "SetEndpointToECSAgent": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EcsEndpoint"
            },
            ""
          ]
        }
      ]
    },
    "UseSpecifiedVpcAvailabilityZones": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Join": [
                "",
                {
                  "Ref": "VpcAvailabilityZones"
                }
              ]
            },
            ""
          ]
        }
      ]
    }
  },
  "Description": "AWS CloudFormation template to create a new VPC or use an existing VPC for ECS deployment",
  "Mappings": {
    "VpcCidrs": {
      "ap-northeast-1": {
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "vpc": "10.0.0.0/16"
      },
      "ap-southeast-1": {
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "vpc": "10.0.0.0/16"
      },
      "ap-southeast-2": {
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "vpc": "10.0.0.0/16"
      },
      "eu-central-1": {
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "vpc": "10.0.0.0/16"
      },
      "eu-west-1": {
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "vpc": "10.0.0.0/16"
      },
      "sa-east-1": {
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "vpc": "10.0.0.0/16"
      },
      "us-east-1": {
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "vpc": "10.0.0.0/16"
      },
      "us-west-1": {
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "vpc": "10.0.0.0/16"
      },
      "us-west-2": {
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "vpc": "10.0.0.0/16"
      }
    }
  },
  "Outputs": {
    "EcsElbName": {
      "Description": "Load Balancer for ECS Service",
      "Value": {
        "Fn::If": [
          "CreateELB",
          {
            "Fn::If": [
              "CreateELBForNewVpc",
              {
                "Ref": "EcsElasticLoadBalancer"
              },
              {
                "Ref": "EcsElasticLoadBalancerExistingVpc"
              }
            ]
          },
          ""
        ]
      }
    },
    "EcsInstanceAsgName": {
      "Description": "Auto Scaling Group Name for ECS Instances",
      "Value": {
        "Ref": "EcsInstanceAsg"
      }
    }
  },
  "Parameters": {
    "AsgMaxSize": {
      "Default": "1",
      "Description": "Maximum size and initial Desired Capacity of ECS Auto Scaling Group",
      "Type": "Number"
    },
    "CreateElasticLoadBalancer": {
      "Default": "false",
      "Description": "Optional : When set to true, creates a ELB for ECS Service",
      "Type": "String"
    },
    "EcsAmiId": {
      "Description": "ECS AMI Id",
      "Type": "String"
    },
    "EcsClusterName": {
      "Default": "default",
      "Description": "ECS Cluster Name",
      "Type": "String"
    },
    "EcsEndpoint": {
      "Default": "",
      "Description": "Optional : ECS Endpoint for the ECS Agent to connect to",
      "Type": "String"
    },
    "EcsInstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type.",
      "Default": "t2.micro",
      "Description": "ECS EC2 instance type",
      "Type": "String"
    },
    "EcsPort": {
      "Default": "80",
      "Description": "Optional - Security Group port to open on ECS instances - defaults to port 80",
      "Type": "String"
    },
    "ElbHealthCheckTarget": {
      "Default": "HTTP:80/",
      "Description": "Optional - Health Check Target for ELB - defaults to HTTP:80/",
      "Type": "String"
    },
    "ElbPort": {
      "Default": "80",
      "Description": "Optional - Security Group port to open on ELB - port 80 will be open by default",
      "Type": "String"
    },
    "ElbProtocol": {
      "Default": "HTTP",
      "Description": "Optional - ELB Protocol - defaults to HTTP",
      "Type": "String"
    },
    "IamRoleInstanceProfile": {
      "Description": "Name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance",
      "Type": "String"
    },
    "KeyName": {
      "Default": "",
      "Description": "Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS instances",
      "Type": "String"
    },
    "SourceCidr": {
      "Default": "0.0.0.0/0",
      "Description": "Optional - CIDR/IP range for EcsPort and ElbPort - defaults to 0.0.0.0/0",
      "Type": "String"
    },
    "SubnetIds": {
      "Default": "",
      "Description": "Optional - Comma separated list of existing VPC Subnet Ids where ECS instances will run",
      "Type": "CommaDelimitedList"
    },
    "VpcAvailabilityZones": {
      "Default": "",
      "Description": "Optional : Comma-delimited list of two VPC availability zones in which to create subnets",
      "Type": "CommaDelimitedList"
    },
    "VpcId": {
      "AllowedPattern": "^(?:vpc-[0-9a-f]{8}|)$",
      "ConstraintDescription": "VPC Id must begin with 'vpc-' or leave blank to have a new VPC created",
      "Default": "",
      "Description": "Optional - VPC Id of existing VPC. Leave blank to have a new VPC created",
      "Type": "String"
    }
  },
  "Resources": {
    "AttachGateway": {
      "Condition": "CreateVpcResources",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "EcsElasticLoadBalancer": {
      "Condition": "CreateELBForNewVpc",
      "Properties": {
        "CrossZone": "true",
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": {
            "Ref": "ElbHealthCheckTarget"
          },
          "Timeout": "5",
          "UnhealthyThreshold": "10"
        },
        "Listeners": [
          {
            "InstancePort": {
              "Ref": "EcsPort"
            },
            "LoadBalancerPort": {
              "Ref": "ElbPort"
            },
            "Protocol": {
              "Ref": "ElbProtocol"
            }
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "ElbSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "PubSubnetAz1"
          },
          {
            "Ref": "PubSubnetAz2"
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "EcsElasticLoadBalancerExistingVpc": {
      "Condition": "CreateELBForExistingVpc",
      "Properties": {
        "CrossZone": "true",
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": {
            "Ref": "ElbHealthCheckTarget"
          },
          "Timeout": "5",
          "UnhealthyThreshold": "10"
        },
        "Listeners": [
          {
            "InstancePort": {
              "Ref": "EcsPort"
            },
            "LoadBalancerPort": {
              "Ref": "ElbPort"
            },
            "Protocol": {
              "Ref": "ElbProtocol"
            }
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "ElbSecurityGroup"
          }
        ],
        "Subnets": {
          "Ref": "SubnetIds"
        }
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "EcsInstanceAsg": {
      "Properties": {
        "DesiredCapacity": {
          "Ref": "AsgMaxSize"
        },
        "LaunchConfigurationName": {
          "Fn::If": [
            "CreateEC2LCWithKeyPair",
            {
              "Ref": "EcsInstanceLc"
            },
            {
              "Ref": "EcsInstanceLcWithoutKeyPair"
            }
          ]
        },
        "MaxSize": {
          "Ref": "AsgMaxSize"
        },
        "MinSize": "1",
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "ECS Instance - ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "VPCZoneIdentifier": {
          "Fn::If": [
            "CreateVpcResources",
            [
              {
                "Fn::Join": [
                  ",",
                  [
                    {
                      "Ref": "PubSubnetAz1"
                    },
                    {
                      "Ref": "PubSubnetAz2"
                    }
                  ]
                ]
              }
            ],
            {
              "Ref": "SubnetIds"
            }
          ]
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    },
    "EcsInstanceLc": {
      "Condition": "CreateEC2LCWithKeyPair",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": {
          "Ref": "IamRoleInstanceProfile"
        },
        "ImageId": {
          "Ref": "EcsAmiId"
        },
        "InstanceType": {
          "Ref": "EcsInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "EcsSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::If": [
            "SetEndpointToECSAgent",
            {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash\n",
                    "echo ECS_CLUSTER=",
                    {
                      "Ref": "EcsClusterName"
                    },
                    " >> /etc/ecs/ecs.config",
                    "\necho ECS_BACKEND_HOST=",
                    {
                      "Ref": "EcsEndpoint"
                    },
                    " >> /etc/ecs/ecs.config"
                  ]
                ]
              }
            },
            {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash\n",
                    "echo ECS_CLUSTER=",
                    {
                      "Ref": "EcsClusterName"
                    },
                    " >> /etc/ecs/ecs.config"
                  ]
                ]
              }
            }
          ]
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "EcsInstanceLcWithoutKeyPair": {
      "Condition": "CreateEC2LCWithoutKeyPair",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": {
          "Ref": "IamRoleInstanceProfile"
        },
        "ImageId": {
          "Ref": "EcsAmiId"
        },
        "InstanceType": {
          "Ref": "EcsInstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "EcsSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::If": [
            "SetEndpointToECSAgent",
            {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash\n",
                    "echo ECS_CLUSTER=",
                    {
                      "Ref": "EcsClusterName"
                    },
                    " >> /etc/ecs/ecs.config",
                    "\necho ECS_BACKEND_HOST=",
                    {
                      "Ref": "EcsEndpoint"
                    },
                    " >> /etc/ecs/ecs.config"
                  ]
                ]
              }
            },
            {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash\n",
                    "echo ECS_CLUSTER=",
                    {
                      "Ref": "EcsClusterName"
                    },
                    " >> /etc/ecs/ecs.config"
                  ]
                ]
              }
            }
          ]
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "EcsSecurityGroup": {
      "Properties": {
        "GroupDescription": "ECS Allowed Ports",
        "SecurityGroupIngress": {
          "Fn::If": [
            "CreateELB",
            [
              {
                "CidrIp": {
                  "Ref": "SourceCidr"
                },
                "FromPort": {
                  "Ref": "EcsPort"
                },
                "IpProtocol": "tcp",
                "ToPort": {
                  "Ref": "EcsPort"
                }
              },
              {
                "FromPort": "1",
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                  "Ref": "ElbSecurityGroup"
                },
                "ToPort": "65535"
              }
            ],
            [
              {
                "CidrIp": {
                  "Ref": "SourceCidr"
                },
                "FromPort": {
                  "Ref": "EcsPort"
                },
                "IpProtocol": "tcp",
                "ToPort": {
                  "Ref": "EcsPort"
                }
              }
            ]
          ]
        },
        "VpcId": {
          "Fn::If": [
            "CreateVpcResources",
            {
              "Ref": "Vpc"
            },
            {
              "Ref": "VpcId"
            }
          ]
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "ElbSecurityGroup": {
      "Properties": {
        "GroupDescription": "ELB Allowed Ports",
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Ref": "SourceCidr"
            },
            "FromPort": {
              "Ref": "ElbPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "ElbPort"
            }
          }
        ],
        "VpcId": {
          "Fn::If": [
            "CreateVpcResources",
            {
              "Ref": "Vpc"
            },
            {
              "Ref": "VpcId"
            }
          ]
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "InternetGateway": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::InternetGateway"
    },
    "PubSubnet1RouteTableAssociation": {
      "Condition": "CreateVpcResources",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        },
        "SubnetId": {
          "Ref": "PubSubnetAz1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PubSubnet2RouteTableAssociation": {
      "Condition": "CreateVpcResources",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        },
        "SubnetId": {
          "Ref": "PubSubnetAz2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PubSubnetAz1": {
      "Condition": "CreateVpcResources",
      "Properties": {
        "AvailabilityZone": {
          "Fn::If": [
            "UseSpecifiedVpcAvailabilityZones",
            {
              "Fn::Select": [
                "0",
                {
                  "Ref": "VpcAvailabilityZones"
                }
              ]
            },
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            {
              "Ref": "AWS::Region"
            },
            "pubsubnet1"
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PubSubnetAz2": {
      "Condition": "CreateVpcResources",
      "Properties": {
        "AvailabilityZone": {
          "Fn::If": [
            "UseSpecifiedVpcAvailabilityZones",
            {
              "Fn::Select": [
                "1",
                {
                  "Ref": "VpcAvailabilityZones"
                }
              ]
            },
            {
              "Fn::Select": [
                "1",
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            {
              "Ref": "AWS::Region"
            },
            "pubsubnet2"
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicRouteViaIgw": {
      "Condition": "CreateVpcResources",
      "DependsOn": "AttachGateway",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "RouteViaIgw": {
      "Condition": "CreateVpcResources",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "Vpc": {
      "Condition": "CreateVpcResources",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            {
              "Ref": "AWS::Region"
            },
            "vpc"
          ]
        },
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true"
      },
      "Type": "AWS::EC2::VPC"
    }
  }
}
